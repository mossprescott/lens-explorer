[
  {
    "name": "Library",
    "comment": " Type classes making up the part of the Haskell library which is referred to by the\nlens types.\n\nThis will be the place to encode everything we need to know about the relationships\nbetween types to infer what can be used where.\n\n# Typically applied to `p`:\n@docs profunctor, choice\n\n# Typically applied to `f`:\n@docs functor, applicative, apply, contravariant\n\n# Monad and related classes, used by some of the functions over lenses:\n@docs monad, monadReader, monadState, const, ident\n\n# Related to Setting:\n@docs settable, distributive, traversable, foldable\n\n# Other\n@docs isDefined\n",
    "aliases": [],
    "types": [],
    "values": [
      {
        "name": "applicative",
        "comment": " Applicative.\n",
        "type": "Haskell.TypeClass"
      },
      {
        "name": "apply",
        "comment": " Apply.\n",
        "type": "Haskell.TypeClass"
      },
      {
        "name": "choice",
        "comment": " Choice.\n",
        "type": "Haskell.TypeClass"
      },
      {
        "name": "const",
        "comment": " Const.\n",
        "type": "Haskell.TypeConstructor"
      },
      {
        "name": "contravariant",
        "comment": " Contravariant.\n",
        "type": "Haskell.TypeClass"
      },
      {
        "name": "distributive",
        "comment": " Distributive, the dual of Traversable.\n",
        "type": "Haskell.TypeClass"
      },
      {
        "name": "foldable",
        "comment": " Foldable.\n",
        "type": "Haskell.TypeClass"
      },
      {
        "name": "functor",
        "comment": " Functor.\n",
        "type": "Haskell.TypeClass"
      },
      {
        "name": "ident",
        "comment": " Identity. Note: name shortened to avoid colliding with the built in (`identity`)[Basic#identity] fn.\n",
        "type": "Haskell.TypeConstructor"
      },
      {
        "name": "isDefined",
        "comment": " Indicates the existence of an instance for a certain type class applied to\na certain type(s).\n",
        "type": "Haskell.TypeClass -> List Haskell.Type -> Bool"
      },
      {
        "name": "monad",
        "comment": " Monad.\n",
        "type": "Haskell.TypeClass"
      },
      {
        "name": "monadReader",
        "comment": " MonadReader.\n",
        "type": "Haskell.TypeClass"
      },
      {
        "name": "monadState",
        "comment": " MonadState.\n",
        "type": "Haskell.TypeClass"
      },
      {
        "name": "profunctor",
        "comment": " Profunctor.\n",
        "type": "Haskell.TypeClass"
      },
      {
        "name": "settable",
        "comment": " Settable, which combines apparently all the things and is effectively provided only for\nIdentity (and things isomorphic to it).\n",
        "type": "Haskell.TypeClass"
      },
      {
        "name": "traversable",
        "comment": " Traversable.\n",
        "type": "Haskell.TypeClass"
      }
    ],
    "generated-with-elm-version": "0.18.0"
  },
  {
    "name": "Haskell",
    "comment": " Haskell types and operations on them. This is not really a full representation of\nHaskell types, but is enough to express the types of parametric functions and typeclass\nconstraints.\n\n# Basics\n@docs Type, TypeVar, Op, Constraint, TypeConstructor, TypeClass, Supers, app\n\n# Aliases\n@docs TypeAlias, aliasRef\n\n# Utilities\n@docs typeToSrc, constraintToSrc, prec, substitute\n",
    "aliases": [
      {
        "name": "TypeAlias",
        "comment": " A type alias is a sort of type-level macro that can be expanded at any time.\n",
        "args": [],
        "type": "{ name : String, args : List Haskell.TypeVar, rhs : Haskell.Type }"
      },
      {
        "name": "TypeClass",
        "comment": " A type class, including references to any type classes it inherits from.\n",
        "args": [],
        "type": "{ name : String, supers : Haskell.Supers }"
      },
      {
        "name": "TypeConstructor",
        "comment": " A type constructor.\n",
        "args": [],
        "type": "{ name : String }"
      },
      {
        "name": "TypeVar",
        "comment": " A named type variable.\n",
        "args": [],
        "type": "{ name : String }"
      }
    ],
    "types": [
      {
        "name": "Constraint",
        "comment": " A constraint on a type paramater.\n",
        "args": [],
        "cases": [
          [
            "TypeClassConstraint",
            [
              "Haskell.TypeClass",
              "List Haskell.TypeVar"
            ]
          ],
          [
            "Equivalent",
            [
              "Haskell.Type",
              "Haskell.TypeVar"
            ]
          ]
        ]
      },
      {
        "name": "Op",
        "comment": " A (type-level) operator; that is, an infix type constructor such as `->`. Actually,\nthat's the _only_ one for now.\n",
        "args": [],
        "cases": [
          [
            "FnOp",
            []
          ]
        ]
      },
      {
        "name": "Supers",
        "comment": " A type to capture the recursion in TypeClass, because Elm is weird about pushing\nyou towards type aliases.\n",
        "args": [],
        "cases": [
          [
            "Supers",
            [
              "List Haskell.TypeClass"
            ]
          ]
        ]
      },
      {
        "name": "Type",
        "comment": " A Haskell type.\n",
        "args": [],
        "cases": [
          [
            "Unit",
            []
          ],
          [
            "Var",
            [
              "Haskell.TypeVar"
            ]
          ],
          [
            "Constr",
            [
              "Haskell.TypeConstructor"
            ]
          ],
          [
            "App",
            [
              "Haskell.Type",
              "Haskell.Type"
            ]
          ],
          [
            "Fn",
            [
              "Haskell.Type",
              "Haskell.Type"
            ]
          ],
          [
            "Prefix",
            [
              "Haskell.Op"
            ]
          ],
          [
            "Constrained",
            [
              "List Haskell.Constraint",
              "Haskell.Type"
            ]
          ]
        ]
      }
    ],
    "values": [
      {
        "name": "aliasRef",
        "comment": " When an alias is referenced, it looks like a type constructor.\n",
        "type": "Haskell.TypeAlias -> Haskell.Type"
      },
      {
        "name": "app",
        "comment": " Nested Apps applying a curried fn to multiple args.\n",
        "type": "Haskell.Type -> List Haskell.Type -> Haskell.Type"
      },
      {
        "name": "constraintToSrc",
        "comment": " Convert a constraint to Haskell syntax.\n",
        "type": "Haskell.Constraint -> Type.Node"
      },
      {
        "name": "prec",
        "comment": " Precedence table for Haskell expressions, used in [`typeToSrc`](#typeToSrc).\n",
        "type": "{ atom : Int , app : Int , infix : Int , fn : Int , constrained : Int , equiv : Int }"
      },
      {
        "name": "substitute",
        "comment": " Rewrite one or more type variables by substituting for each occurrence.\nNote: takes a list of pairs because Elm Dicts can't contain arbitrary types.\n",
        "type": "List ( Haskell.TypeVar, Haskell.TypeVar ) -> Haskell.Type -> Haskell.Type"
      },
      {
        "name": "typeToSrc",
        "comment": " Convert a type to Haskell syntax, along with an indication of the precendence of the outermost\n  expression.\n",
        "type": "Haskell.Type -> ( Type.Precedence, Type.Node )"
      }
    ],
    "generated-with-elm-version": "0.18.0"
  },
  {
    "name": "Type",
    "comment": " This module provides a simple AST for Haskell type declarations and conversion to\nHTML markup.\n\n# AST\n@docs Node, Precedence\n\n# Rendering\n@docs nodeToHtml, nodeToString\n\n# Helpers\n@docs parenthesize, parenthesizeLeftAssoc, parenthesizeRightAssoc, parenthesizeOne\n",
    "aliases": [
      {
        "name": "Precedence",
        "comment": " Precendence levels for parenthesization.\n",
        "args": [],
        "type": "Int"
      }
    ],
    "types": [
      {
        "name": "Node",
        "comment": " Simple AST for source code.\n",
        "args": [],
        "cases": [
          [
            "Keyword",
            [
              "String"
            ]
          ],
          [
            "Name",
            [
              "String"
            ]
          ],
          [
            "Symbol",
            [
              "String"
            ]
          ],
          [
            "Words",
            [
              "List Type.Node"
            ]
          ],
          [
            "Juxt",
            [
              "List Type.Node"
            ]
          ]
        ]
      }
    ],
    "values": [
      {
        "name": "nodeToHtml",
        "comment": " Translate AST nodes into styled HTML nodes.\n",
        "type": "Type.Node -> Html.Html msg"
      },
      {
        "name": "nodeToString",
        "comment": " Translate AST nodes into a String. Just flattens and strips the constructors.\n",
        "type": "Type.Node -> String"
      },
      {
        "name": "parenthesize",
        "comment": " Construct a Words node from a sequence of contained nodes, given the precedence of the\nouter expression and each inner sub-expression. Parens are inserted wherever the embedded\nexpression has lower (or equal) precedence.\n",
        "type": "Type.Precedence -> Maybe.Maybe Type.Node -> ( Type.Precedence, Type.Node ) -> ( Type.Precedence, Type.Node ) -> ( Type.Precedence, Type.Node )"
      },
      {
        "name": "parenthesizeLeftAssoc",
        "comment": " Insert parens as need for a left-associative operator; that is, parens are not needed\naround the left expression if it has the same precendence as the outer expression.\n",
        "type": "Type.Precedence -> Maybe.Maybe Type.Node -> ( Type.Precedence, Type.Node ) -> ( Type.Precedence, Type.Node ) -> ( Type.Precedence, Type.Node )"
      },
      {
        "name": "parenthesizeOne",
        "comment": " Wrap a node in parens if it has lower (or equal) precedence than the outer expression.\n",
        "type": "Type.Precedence -> ( Type.Precedence, Type.Node ) -> Type.Node"
      },
      {
        "name": "parenthesizeRightAssoc",
        "comment": " Insert parens as need for a right-associative operator; that is, parens are not needed\naround the right expression if it has the same precendence as the outer expression.\n",
        "type": "Type.Precedence -> Maybe.Maybe Type.Node -> ( Type.Precedence, Type.Node ) -> ( Type.Precedence, Type.Node ) -> ( Type.Precedence, Type.Node )"
      }
    ],
    "generated-with-elm-version": "0.18.0"
  }
]